buildscript {
    ext.kotlin_version = '1.2.21'
    repositories {
        google()
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.0.1'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath 'com.github.triplet.gradle:play-publisher:1.2.0'
    }
}

allprojects {
    repositories {
        google()
        jcenter()
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

/**
 * Service account key. This gets the service account key from gradle.properties file
 * @return String
 * */
def getServiceAccountKey = { ->
    try {
        Properties properties = new Properties()
        properties.load(new FileInputStream("gradle.properties"))
        return properties.getProperty("SERVICE_ACCOUNT_EMAIL")
    } catch(ignored){
        return ""
    }
}

def getFabricApiKey = { ->
    try{
        Properties properties = new Properties()
        properties.load(new FileInputStream("gradle.properties"))
        return properties.getProperty("FABRIC_API_KEY")
    } catch(ignored){
        return ""
    }
}

/**
 * Get version name for application
 * Will use git versioning*/
def getVersionName = { ->
    try {
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine "git", "describe", "--dirty"
            standardOutput = stdout
        }
        return stdout.toString().trim()
    } catch(ignored){
        Properties properties = new Properties()
        properties.load(new FileInputStream("gradle.properties"))
        return properties.getProperty("VERSION_NAME")
    }
}

/**
 * Get version code from git history
 * This will dynamically increase the version code
 * If it fails to get from git, it will get it from the properties file, ensure that there is a properties
 * file at root of project
 * */
def getVersionCode = { ->
    try{
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine "git", "rev-list", "--first-parent", "--count", "origin/master"
            standardOutput = stdout
        }
        Random random = new Random()

        // this ensures that the version code remains unique for every build
        def number = 50 + random.nextInt(150) + random.nextInt(20) * random.nextInt(10)
        return Integer.parseInt(stdout.toString().trim()) + number
    }catch (ignored){
        Properties properties = new Properties()
        properties.load(new FileInputStream("gradle.properties"))
        return Integer.parseInt(properties.getProperty("VERSION_CODE"))
    }
}

ext {
    // configurations to send to Play Store for automated publishing
    pJsonKeyFile = rootProject.file("keystores/publish_key.json")
    serviceAccountEmail = getServiceAccountKey()
    fabricApiKey = getFabricApiKey()
    versionName = getVersionName()
    versionCode = getVersionCode()

    /**
     * Set this to true to create two separate APKs instead of one:
     *   - An APK that only works on ARM devices
     *   - An APK that only works on x86 devices
     * The advantage is the size of the APK is reduced by about 4MB.
     * Upload all the APKs to the Play Store and people will download
     * the correct one based on the CPU architecture of their device.
     */
    enableSeparateBuildPerCPUArchitecture = true

    // If true, also generate a universal APK
    enableUniversalApk = true

    // ABI codes
    abiCodes = ["armeabi-v7a": 1, "x86": 2, "mips": 3, "x86_64": 4, "armeabi": 5, "arm64-v8a": 6]

    // DEFAULT CONFIG
    compileSdkVersion = 27
    minSdkVersion = 15
    targetSdkVersion = 27

    // COMMON DEPENDENCIES ACROSS MODULES
    // support lib
    supportLibVersion = "27.0.2"
    constraintLayoutVersion = "1.0.2"

    // multidex
    multiDexVersion = "1.0.2"

    // COMMON TEST DEPENDENCIES
    jUnitVersion = "4.12"
    runnerVersion = "1.0.1"
    espressoVersion = "3.0.1"
}
